Basic Authentication
- 사용자 이름 / 비밀번호를 Base64로 인코딩ㅇ하여 Authorization 헤더에 포함하여 전송됨
- 매우 안전하지 않음, SSL/TLS 와 함께 사용됨

Authorization: Basic ~~~

Bearer Token Authentication
- 헤더에 토큰을 포함하여 전송 Authorization 헤더에 포함하여 전송
- JWT 를 사용하여 인증
- 간단한 방식, 상태를 유지하지 않음, 확장성이 높음
- 토큰 노출 위험, 토큰 관리

Authorization: Bearer ~~~

OAuth
- 토큰기반 인증 방식, 사용자가 직접 자격을 증명 X 미리 인증 받아서 토큰을 발급 받고
- 이 토큰을 이용하여 API 를 요청하는 방식 OAuth 2.0

kakao, naeer, git, Facebook

API Key / Session based Authentication 

JWT(Json Web Token) : 클레임이라고 불리는 정보를 jSON 형태로 안전하게 전송하기 위한 토큰 기반의 표준
- 인증과 정보 교환에 사용, 서명이 되어 있어서 신뢰성 확보가 가능
구성
1. Header : 토큰의 타입과 사용된 알고리즘 정보를 담고 있음, Base64Url로 인코딩
2. Payload : 클레임 정보, 대상, 발행자, 만료 시간 등 다양한 정보가 포함됨, Base64Url 로 인코딩
3. Signature : Header와 Payload, Secret key 를 사용하여 생성된 서명

인증, 정보교환

장점 :
- 상태를 유지 X
- 간단하고 자기 포함적 : 자신이 필요한 모든 정보를 다 가지고 있음
- 확장성 있음 : 다른 곳에서도 사용 가능

단점 : 
- 크기 : 클레임이 많을 수록 토큰의 크기가 커짐
- 보안 : 암호화 되어 있기 보다는 인코딩 되어 있는 상태
        서명은 되어있지만 암호화는 되어있지 않음, 중요한 정보를 JWT 에 포함되면 안됨
- 토큰 관리 : 만료 시간, 갱신


================================================
java 17 버전 이상만 사용해야 함
javax.* -> jakarta.* 변경되어야 함
application.properties / application.yaml (use-legacty-procession)
AntPathMatcher -> PathPatternParser 변경되어야함
외부 라이브러리 사용 시 Jakarta, Spring Framework 6.0 지원 여부

================================================

200
- 성공 : "SU" / "Success."

400
- 유효성 검증 실패 : "VF" / "Validation failed."
- 중복된 이메일 : "DE" / "Duplicate email."
- 중복된 전화번호 : "DT" / "Duplicate tel number."
- 중복된 닉네임 : "DN" / "Duplicate nickname."
- 존재하지 않는 유저 : "NU" / "This user does not exist."
- 존재하지 않는 게시물 : "NB" / "This board does not exist."

401 
- 로그인 실패 : "SF" / "Login information mismatch."
- 인증 실패 : "AF" / "Authentication Failed."

403 
- 권한 없음 : "NP" / "Do not have permission."

500
- 데이터베이스 에러 : "DBE" / "Database error"




